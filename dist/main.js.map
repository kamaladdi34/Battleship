{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/gameBoard.js","webpack://battleship/./src/gameManager.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/DOMmanager.js"],"sourcesContent":["const Ship = require(\"./ship\");\n\nclass Cell {\n  constructor() {\n    this.ship = null;\n    this.isHit = false;\n  }\n}\n\nclass GameBoard {\n  #board = null;\n  #ships = [];\n  #Allowedships = [\n    new Ship(5),\n    new Ship(4),\n    new Ship(3),\n    new Ship(3),\n    new Ship(2),\n  ];\n  constructor(size) {\n    this.generateBoard(size);\n  }\n\n  placeShip(coordinates, shipLength, isVertical = false) {\n    let { x, y } = coordinates;\n    return new Promise((resolve, reject) => {\n      if (!this.#checkCoordinates(coordinates)) {\n        reject(\"Coordinates out of range\");\n        return;\n      }\n      if (this.#board[x][y].ship !== null) {\n        reject(\"Target coordinates not empty\");\n        return;\n      }\n      if (!this.#checkForSpace(coordinates, shipLength, isVertical)) {\n        reject(\"Not enough space\");\n        return;\n      }\n      let newShip = this.#getShip(shipLength);\n      if (!newShip) {\n        reject(\"No ship found\");\n      }\n      if (!isVertical) {\n        for (let i = 0; i < shipLength; i++) {\n          this.#board[x][y + i].ship = newShip;\n        }\n      } else {\n        for (let i = 0; i < shipLength; i++) {\n          this.#board[x + i][y].ship = newShip;\n        }\n      }\n      resolve(newShip);\n      this.#ships.push(newShip);\n    });\n  }\n\n  #getShip(shipLength) {\n    for (let i = 0; i < this.#Allowedships.length; i++) {\n      if (this.#Allowedships[i].length == shipLength) {\n        return this.#Allowedships.splice(i, 1)[0];\n      }\n    }\n  }\n\n  #checkForSpace(coordinates, shipLength, isVertical) {\n    let { x, y } = coordinates;\n    let canPlaceShip = true;\n    if (!isVertical) {\n      for (let i = 0; i < shipLength; i++) {\n        let coords = { x: x, y: y + i };\n        if (\n          !this.#checkCoordinates(coords) ||\n          this.#board[x][y + i].ship !== null\n        ) {\n          canPlaceShip = false;\n        }\n      }\n    } else {\n      for (let i = 0; i < shipLength; i++) {\n        let coords = { x: x + i, y: y };\n        if (\n          !this.#checkCoordinates(coords) ||\n          this.#board[x + i][y].ship !== null\n        ) {\n          canPlaceShip = false;\n        }\n      }\n    }\n    return canPlaceShip;\n  }\n  getBoard() {\n    return this.#board;\n  }\n  #coordinatesInRange(coordinates) {\n    let { x, y } = coordinates;\n    return !(\n      x < 0 ||\n      y < 0 ||\n      x >= this.#board.length ||\n      y >= this.#board.length\n    );\n  }\n\n  #checkCoordinates(coordinates) {\n    if (!(\"x\" in coordinates) || !(\"y\" in coordinates)) {\n      return false;\n    }\n    if (isNaN(coordinates.x) || isNaN(coordinates.y)) {\n      return false;\n    }\n    if (!this.#coordinatesInRange(coordinates)) {\n      return false;\n    }\n    return true;\n  }\n\n  receiveAttack(coordinates) {\n    let { x, y } = coordinates;\n    if (!this.#checkCoordinates(coordinates)) {\n      return;\n    }\n    if (this.#board[x][y].isHit == true) {\n      return { success: false, shipHit: false, error: \"Cell already hit\" };\n    }\n    this.#board[x][y].isHit = true;\n\n    if (this.#board[x][y].ship == null) {\n      return { success: true, shipHit: false, error: null };\n    }\n\n    this.#board[x][y].ship.hit();\n    return { success: true, shipHit: true, error: null };\n  }\n\n  allShipsAreSunk() {\n    let allAreSunk = true;\n    for (let i = 0; i < this.#ships.length; i++) {\n      if (!this.#ships[i].isSunk()) {\n        allAreSunk = false;\n      }\n    }\n    return allAreSunk;\n  }\n  allShipsPlaced() {\n    return this.#Allowedships.length == 0;\n  }\n  getCell(coordinates) {\n    return this.#board[coordinates.x][coordinates.y];\n  }\n\n  generateBoard(size) {\n    this.#board = new Array(size)\n      .fill(\"\")\n      .map((_) => new Array(size).fill(\"\").map((_) => new Cell()));\n  }\n}\n\nmodule.exports = GameBoard;\n","const GameBoard = require(\"./gameBoard\");\nconst Player = require(\"./player\");\n\nclass GameManager {\n  #gameStarted = false;\n  #playerTurn = true;\n  #playerBoard = null;\n  #otherBoard = null;\n\n  constructor() {\n    this.player = null;\n    this.otherPlayer = null;\n  }\n\n  get gameStarted() {\n    return this.#gameStarted;\n  }\n\n  newGame(boardSize, players) {\n    return new Promise((resolve, reject) => {\n      if (!boardSize || !players || boardSize <= 0) {\n        reject(\"Incorrect game info\");\n      }\n\n      this.player = new Player(players[0].name, players[0].isComputer);\n      this.otherPlayer = new Player(players[1].name, players[1].isComputer);\n      this.#playerBoard = new GameBoard(boardSize);\n      this.#otherBoard = new GameBoard(boardSize);\n\n      this.#playerBoard.placeShip({ x: 0, y: 3 }, 5);\n      this.#playerBoard.placeShip({ x: 1, y: 3 }, 4);\n      this.#playerBoard.placeShip({ x: 2, y: 2 }, 3);\n      this.#playerBoard.placeShip({ x: 3, y: 5 }, 3);\n      this.#playerBoard.placeShip({ x: 4, y: 0 }, 2, true);\n\n      this.#otherBoard.placeShip({ x: 0, y: 0 }, 5);\n      this.#otherBoard.placeShip({ x: 1, y: 0 }, 4);\n      this.#otherBoard.placeShip({ x: 2, y: 0 }, 3);\n      this.#otherBoard.placeShip({ x: 3, y: 0 }, 3);\n      this.#otherBoard.placeShip({ x: 4, y: 0 }, 2);\n      resolve(\"Game initiated\");\n    });\n  }\n\n  startGame() {\n    if (this.#gameStarted) {\n      return;\n    }\n    if (!this.#playerBoard || !this.#otherBoard) {\n      return false;\n    }\n    return (this.#gameStarted =\n      this.#playerBoard.allShipsPlaced() && this.#otherBoard.allShipsPlaced());\n  }\n\n  playTurn(coordinates) {\n    if (!this.#gameStarted) {\n      return;\n    }\n    if (this.#playerTurn) {\n      this.#playerTurn = false;\n      return this.#otherBoard.receiveAttack(coordinates);\n    } else {\n      this.#playerTurn = true;\n      return this.#playerBoard.receiveAttack(coordinates);\n    }\n  }\n\n  getPlayerBoard() {\n    return this.#getBoardInfo(this.#playerBoard.getBoard());\n  }\n\n  getOtherBoard() {\n    return this.#getBoardInfo(this.#otherBoard.getBoard());\n  }\n\n  checkForWinner() {\n    if (this.#playerBoard.allShipsAreSunk()) {\n      return this.otherPlayer;\n    }\n    if (this.#otherBoard.allShipsAreSunk()) {\n      return this.player;\n    }\n  }\n\n  #getBoardInfo(targetBoard) {\n    let board = new Array(10).fill(\"\").map((_) => new Array(10).fill(\"\"));\n    for (let i = 0; i < targetBoard.length; i++) {\n      for (let j = 0; j < targetBoard[i].length; j++) {\n        let content = \"empty\";\n        let cell = targetBoard[i][j];\n        if (!cell.isHit && cell.ship == null) {\n          content = \"empty\";\n        }\n        if (cell.isHit && cell.ship == null) {\n          content = \"miss\";\n        }\n        if (cell.isHit && cell.ship != null) {\n          content = \"hit\";\n        }\n        if (!cell.isHit && cell.ship != null) {\n          content = \"ship\";\n        }\n        board[i][j] = content;\n      }\n    }\n    return board;\n  }\n}\nmodule.exports = GameManager;\n","class Player {\n  constructor(name = \"player\", isComputer = false) {\n    this.name = name;\n    this.isComputer = isComputer;\n  }\n}\nmodule.exports = Player;\n","class Ship {\n  #hits = 0;\n  constructor(length) {\n    this.length = this.#setLength(length);\n  }\n\n  hit() {\n    if (!this.isSunk()) this.#hits++;\n  }\n\n  isSunk() {\n    return this.#hits >= this.length;\n  }\n\n  get hits() {\n    return this.#hits;\n  }\n\n  #setLength(length) {\n    if (isNaN(length)) {\n      return 1;\n    }\n    let shipLength = Math.floor(Math.abs(length));\n    if (shipLength == 0) {\n      return 1;\n    }\n    return shipLength;\n  }\n}\n\nmodule.exports = Ship;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const GameBoard = require(\"./gameBoard.js\");\nconst GameManager = require(\"./gameManager.js\");\nconst boardsContainer = document.querySelector(\".boards-container\");\n\nlet players = [\n  { name: \"player one\", isComputer: false },\n  { name: \"player two\", isComputer: false },\n];\n\nconst gameManager = new GameManager();\n\ndocument.addEventListener(\"click\", (event) => {\n  if (event.target.parentNode.id == \"other\") {\n    let coords = event.target.getAttribute(\"data-coordinates\").split(\":\");\n    playTurn(coords);\n  }\n});\n\ngameManager.newGame(10, players);\ngameManager.startGame();\n\nlet playerBoardDOM = createBoardDOM(10, \"player\");\nlet otherPlayerBoardDOM = createBoardDOM(10, \"other\");\n\nupdateBoardDom(gameManager.getPlayerBoard(), playerBoardDOM, true);\nupdateBoardDom(gameManager.getOtherBoard(), otherPlayerBoardDOM);\n\nfunction createBoardDOM(size, id) {\n  let boardDOM = new Array(size).fill(\"\").map((_) => new Array(size).fill(\"\"));\n\n  let board = document.createElement(\"div\");\n  board.id = id;\n  board.classList.add(\"board\");\n  let cells = [];\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      let cell = document.createElement(\"div\");\n      cell.classList.add(\"cell\");\n      cell.setAttribute(\"data-coordinates\", `${i}:${j}`);\n      boardDOM[i][j] = cell;\n      row.push(cell);\n    }\n    cells.push(row);\n  }\n  cells.reverse();\n  cells = formatArray(cells);\n  board.append(...cells);\n  boardsContainer.appendChild(board);\n  return boardDOM;\n}\n\nfunction playTurn(coords) {\n  let result = gameManager.playTurn({ x: coords[0], y: coords[1] });\n  if (result.error) {\n    console.log(result.error);\n    return;\n  }\n  let x = Math.floor(Math.random() * 10);\n  let y = Math.floor(Math.random() * 10);\n  gameManager.playTurn({ x, y });\n  console.log(x, y);\n  updateBoardDom(gameManager.getOtherBoard(), otherPlayerBoardDOM);\n  updateBoardDom(gameManager.getPlayerBoard(), playerBoardDOM, true);\n  let winner = gameManager.checkForWinner();\n  if (winner) {\n    console.log(winner);\n  }\n}\nfunction formatArray(array) {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    result.push(...array[i]);\n  }\n  return result;\n}\n\nfunction updateBoardDom(board, boardDOM, displayships = false) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      let content = board[i][j];\n      if (content == \"ship\" && displayships) {\n        boardDOM[i][j].classList.add(\"ship\");\n      }\n      if (content == \"hit\") {\n        boardDOM[i][j].classList.add(\"hit\");\n      }\n      if (content == \"miss\") {\n        boardDOM[i][j].classList.add(\"miss\");\n      }\n    }\n  }\n}\n"],"names":["Ship","Cell","constructor","this","ship","isHit","module","exports","size","generateBoard","placeShip","coordinates","shipLength","isVertical","x","y","Promise","resolve","reject","newShip","i","push","length","splice","canPlaceShip","coords","getBoard","isNaN","receiveAttack","success","shipHit","error","hit","allShipsAreSunk","allAreSunk","isSunk","allShipsPlaced","getCell","Array","fill","map","_","GameBoard","Player","player","otherPlayer","gameStarted","newGame","boardSize","players","name","isComputer","startGame","playTurn","getPlayerBoard","getOtherBoard","checkForWinner","targetBoard","board","j","content","cell","hits","Math","floor","abs","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","GameManager","boardsContainer","document","querySelector","gameManager","addEventListener","event","target","parentNode","id","result","console","log","random","updateBoardDom","otherPlayerBoardDOM","playerBoardDOM","winner","getAttribute","split","createBoardDOM","boardDOM","createElement","classList","add","cells","row","setAttribute","reverse","array","formatArray","append","appendChild","displayships"],"sourceRoot":""}