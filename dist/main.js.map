{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/gameBoard.js","webpack://battleship/./src/gameManager.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/DOMmanager.js"],"sourcesContent":["const Ship = require(\"./ship\");\n\nclass Cell {\n  constructor() {\n    this.ship = null;\n    this.isHit = false;\n  }\n}\n\nclass GameBoard {\n  #board = null;\n  #ships = [];\n  #Allowedships = [\n    new Ship(5),\n    new Ship(4),\n    new Ship(3),\n    new Ship(3),\n    new Ship(2),\n  ];\n  constructor(size) {\n    this.generateBoard(size);\n  }\n\n  placeShip(coordinates, shipLength, isVertical = false) {\n    let { x, y } = coordinates;\n    return new Promise((resolve, reject) => {\n      if (!this.#checkCoordinates(coordinates)) {\n        reject(\n          `Coordinates out of range, ${coordinates.x},${coordinates.y}, ship length: ${shipLength}`\n        );\n        return;\n      }\n      if (this.#board[x][y].ship !== null) {\n        reject(\n          `Target coordinates not empty, ${coordinates.x},${coordinates.y}, ship length: ${shipLength}`\n        );\n        return;\n      }\n      if (!this.#checkForSpace(coordinates, shipLength, isVertical)) {\n        reject(\n          `Not enough space, ${coordinates.x},${coordinates.y}, ship length: ${shipLength}`\n        );\n        return;\n      }\n      let newShip = this.#getShip(shipLength);\n      if (!newShip) {\n        reject(\n          `No ship found, ${coordinates.x},${coordinates.y}, ship length: ${shipLength}`\n        );\n      }\n      if (!isVertical) {\n        for (let i = 0; i < shipLength; i++) {\n          this.#board[x][y + i].ship = newShip;\n        }\n      } else {\n        for (let i = 0; i < shipLength; i++) {\n          this.#board[x + i][y].ship = newShip;\n        }\n      }\n      resolve(newShip);\n      this.#ships.push(newShip);\n    });\n  }\n\n  #getShip(shipLength) {\n    for (let i = 0; i < this.#Allowedships.length; i++) {\n      if (this.#Allowedships[i].length == shipLength) {\n        return this.#Allowedships.splice(i, 1)[0];\n      }\n    }\n  }\n\n  #checkForSpace(coordinates, shipLength, isVertical) {\n    let { x, y } = coordinates;\n    let canPlaceShip = true;\n    if (!isVertical) {\n      for (let i = 0; i < shipLength; i++) {\n        let coords = { x: x, y: y + i };\n        if (\n          !this.#checkCoordinates(coords) ||\n          this.#board[x][y + i].ship !== null\n        ) {\n          canPlaceShip = false;\n        }\n      }\n    } else {\n      for (let i = 0; i < shipLength; i++) {\n        let coords = { x: x + i, y: y };\n        if (\n          !this.#checkCoordinates(coords) ||\n          this.#board[x + i][y].ship !== null\n        ) {\n          canPlaceShip = false;\n        }\n      }\n    }\n    return canPlaceShip;\n  }\n  getBoard() {\n    return this.#board;\n  }\n  #coordinatesInRange(coordinates) {\n    let { x, y } = coordinates;\n    return !(\n      x < 0 ||\n      y < 0 ||\n      x >= this.#board.length ||\n      y >= this.#board.length\n    );\n  }\n\n  #checkCoordinates(coordinates) {\n    if (!(\"x\" in coordinates) || !(\"y\" in coordinates)) {\n      return false;\n    }\n    if (isNaN(coordinates.x) || isNaN(coordinates.y)) {\n      return false;\n    }\n    if (!this.#coordinatesInRange(coordinates)) {\n      return false;\n    }\n    return true;\n  }\n\n  receiveAttack(coordinates) {\n    let { x, y } = coordinates;\n    if (!this.#checkCoordinates(coordinates)) {\n      return;\n    }\n    if (this.#board[x][y].isHit == true) {\n      return { success: false, shipHit: false, error: \"Cell already hit\" };\n    }\n    this.#board[x][y].isHit = true;\n\n    if (this.#board[x][y].ship == null) {\n      return { success: true, shipHit: false, error: null };\n    }\n\n    this.#board[x][y].ship.hit();\n    return { success: true, shipHit: true, error: null };\n  }\n\n  allShipsAreSunk() {\n    let allAreSunk = true;\n    for (let i = 0; i < this.#ships.length; i++) {\n      if (!this.#ships[i].isSunk()) {\n        allAreSunk = false;\n      }\n    }\n    return allAreSunk;\n  }\n  allShipsPlaced() {\n    return this.#Allowedships.length == 0;\n  }\n  getCell(coordinates) {\n    return this.#board[coordinates.x][coordinates.y];\n  }\n\n  generateBoard(size) {\n    this.#board = new Array(size)\n      .fill(\"\")\n      .map((_) => new Array(size).fill(\"\").map((_) => new Cell()));\n  }\n}\n\nmodule.exports = GameBoard;\n","const GameBoard = require(\"./gameBoard\");\nconst Player = require(\"./player\");\n\nclass GameManager {\n  #gameStarted = false;\n  #playerTurn = true;\n  #playerBoard = null;\n  #otherBoard = null;\n\n  constructor() {\n    this.player = null;\n    this.otherPlayer = null;\n  }\n\n  get gameStarted() {\n    return this.#gameStarted;\n  }\n\n  newGame(boardSize, players, playerCoords) {\n    return new Promise(async (resolve, reject) => {\n      if (!boardSize || !players || boardSize <= 0) {\n        reject(\"Incorrect game info\");\n      }\n\n      this.player = new Player(players[0].name, players[0].isComputer);\n      this.otherPlayer = new Player(players[1].name, players[1].isComputer);\n      this.#playerBoard = new GameBoard(boardSize);\n      this.#otherBoard = new GameBoard(boardSize);\n\n      for (let i = 0; i < playerCoords.length; i++) {\n        this.#playerBoard\n          .placeShip(playerCoords[i].coords, playerCoords[i].length)\n          .catch((error) => {\n            console.log(error);\n          });\n      }\n      if (!this.#playerBoard.allShipsPlaced()) {\n        reject(\"Wrong ship coordinates\");\n      }\n      // this.#otherBoard.placeShip({ x: 0, y: 0 }, 5);\n      // this.#otherBoard.placeShip({ x: 1, y: 0 }, 4);\n      // this.#otherBoard.placeShip({ x: 2, y: 0 }, 3);\n      // this.#otherBoard.placeShip({ x: 3, y: 0 }, 3);\n      // this.#otherBoard.placeShip({ x: 4, y: 0 }, 2);\n      await this.generateComputerBoard();\n      resolve(\"Game initiated\");\n    });\n  }\n  async generateComputerBoard() {\n    let shipLengths = [5, 4, 3, 3, 2];\n    let currentShip = 0;\n    while (!this.#otherBoard.allShipsPlaced()) {\n      let coordinates = this.generateCoordinates();\n      try {\n        await this.#otherBoard.placeShip(\n          coordinates,\n          shipLengths[currentShip],\n          Math.floor(Math.random() * 2)\n        );\n        console.log(\n          `placed ship with length ${shipLengths[currentShip]} at ${coordinates.y},${coordinates.x}`\n        );\n        currentShip++;\n      } catch (error) {\n        console.log(\n          `failed to place ship ${shipLengths[currentShip]} at ${coordinates.y},${coordinates.x}, ${error}`\n        );\n      }\n    }\n  }\n  generateCoordinates = () => {\n    let x = Math.floor(Math.random() * 10);\n    let y = Math.floor(Math.random() * 10);\n    return { x, y };\n  };\n  startGame() {\n    if (this.#gameStarted) {\n      return;\n    }\n    if (!this.#playerBoard || !this.#otherBoard) {\n      return false;\n    }\n    return (this.#gameStarted =\n      this.#playerBoard.allShipsPlaced() && this.#otherBoard.allShipsPlaced());\n  }\n\n  playTurn(coordinates) {\n    if (!this.#gameStarted) {\n      return;\n    }\n    if (this.#playerTurn) {\n      let result = this.#otherBoard.receiveAttack(coordinates);\n      if (!result.error) {\n        this.#playerTurn = false;\n      }\n      return result;\n    } else {\n      let result = this.#playerBoard.receiveAttack(coordinates);\n      if (!result.error) {\n        this.#playerTurn = true;\n      }\n      return result;\n    }\n  }\n\n  getPlayerBoard() {\n    return this.#getBoardInfo(this.#playerBoard.getBoard());\n  }\n\n  getOtherBoard() {\n    return this.#getBoardInfo(this.#otherBoard.getBoard());\n  }\n\n  checkForWinner() {\n    if (this.#playerBoard.allShipsAreSunk()) {\n      return this.otherPlayer;\n    }\n    if (this.#otherBoard.allShipsAreSunk()) {\n      return this.player;\n    }\n  }\n\n  #getBoardInfo(targetBoard) {\n    let board = new Array(10).fill(\"\").map((_) => new Array(10).fill(\"\"));\n    for (let i = 0; i < targetBoard.length; i++) {\n      for (let j = 0; j < targetBoard[i].length; j++) {\n        let content = \"empty\";\n        let cell = targetBoard[i][j];\n        if (!cell.isHit && cell.ship == null) {\n          content = \"empty\";\n        }\n        if (cell.isHit && cell.ship == null) {\n          content = \"miss\";\n        }\n        if (cell.isHit && cell.ship != null) {\n          content = \"hit\";\n        }\n        if (!cell.isHit && cell.ship != null) {\n          content = \"ship\";\n        }\n        board[i][j] = content;\n      }\n    }\n    return board;\n  }\n}\nmodule.exports = GameManager;\n","class Player {\n  constructor(name = \"player\", isComputer = false) {\n    this.name = name;\n    this.isComputer = isComputer;\n  }\n}\nmodule.exports = Player;\n","class Ship {\n  #hits = 0;\n  constructor(length) {\n    this.length = this.#setLength(length);\n  }\n\n  hit() {\n    if (!this.isSunk()) this.#hits++;\n  }\n\n  isSunk() {\n    return this.#hits >= this.length;\n  }\n\n  get hits() {\n    return this.#hits;\n  }\n\n  #setLength(length) {\n    if (isNaN(length)) {\n      return 1;\n    }\n    let shipLength = Math.floor(Math.abs(length));\n    if (shipLength == 0) {\n      return 1;\n    }\n    return shipLength;\n  }\n}\n\nmodule.exports = Ship;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const GameManager = require(\"./gameManager.js\");\nconst boardsContainer = document.querySelector(\".boards-container\");\nconst formButton = document.querySelector(\".player-info > button\");\nconst playerNameInput = document.querySelector(\".player-info > #player-name\");\nconst otherNameInput = document.querySelector(\".player-info > #other-name\");\nconst info = document.querySelector(\"body > h3\");\nconst ship5Input = document.querySelector(\"#ship-5\");\nconst ship4Input = document.querySelector(\"#ship-4\");\nconst ship3Input = document.querySelector(\"#ship-3\");\nconst ship3Input2 = document.querySelector(\"#ship-3-2\");\nconst ship2Input = document.querySelector(\"#ship-2\");\nlet gameManager = null;\nlet playerBoardDOM = null;\nlet otherPlayerBoardDOM = null;\nformButton.addEventListener(\"click\", (event) => {\n  event.preventDefault();\n  let playerName = playerNameInput.value;\n  let otherName = otherNameInput.value;\n  if (!playerName) {\n    playerNameInput.reportValidity();\n    return;\n  }\n  if (!otherName) {\n    otherNameInput.reportValidity();\n    return;\n  }\n  let players = [\n    { name: playerName, isComputer: false },\n    { name: otherName, isComputer: true },\n  ];\n  newGame(players);\n});\ndocument.addEventListener(\"click\", (event) => {\n  if (event.target.parentNode.id == \"other\") {\n    let coords = event.target.getAttribute(\"data-coordinates\").split(\":\");\n    playTurn(coords);\n  }\n});\n\nasync function newGame(players) {\n  gameManager = new GameManager();\n  boardsContainer.innerHTML = \"\";\n  let result = await gameManager\n    .newGame(10, players, getCoordinatesInput())\n    .catch((error) => {\n      console.log(error);\n      window.alert(\"Wrong coordinates\");\n    });\n  if (result != \"Game initiated\") {\n    return;\n  }\n  gameManager.startGame();\n\n  playerBoardDOM = createBoardDOM(10, \"player\");\n  otherPlayerBoardDOM = createBoardDOM(10, \"other\");\n\n  updateBoardDom(gameManager.getPlayerBoard(), playerBoardDOM, true);\n  updateBoardDom(gameManager.getOtherBoard(), otherPlayerBoardDOM);\n}\n\nfunction createBoardDOM(size, id) {\n  let boardDOM = new Array(size).fill(\"\").map((_) => new Array(size).fill(\"\"));\n\n  let board = document.createElement(\"div\");\n  board.id = id;\n  board.classList.add(\"board\");\n  let cells = [];\n  for (let i = 0; i < size; i++) {\n    let row = [];\n    for (let j = 0; j < size; j++) {\n      let cell = document.createElement(\"div\");\n      cell.classList.add(\"cell\");\n      cell.setAttribute(\"data-coordinates\", `${i}:${j}`);\n      boardDOM[i][j] = cell;\n      row.push(cell);\n    }\n    cells.push(row);\n  }\n  cells.reverse();\n  cells = formatArray(cells);\n  board.append(...cells);\n  boardsContainer.appendChild(board);\n  return boardDOM;\n}\n\nfunction playTurn(coords) {\n  let result = gameManager.playTurn({ x: coords[0], y: coords[1] });\n  if (result.error) {\n    return;\n  }\n\n  gameManager.playTurn(getComputerCoordinates());\n  updateBoardDom(gameManager.getOtherBoard(), otherPlayerBoardDOM);\n  updateBoardDom(gameManager.getPlayerBoard(), playerBoardDOM, true);\n  let winner = gameManager.checkForWinner();\n  if (winner) {\n    info.innerText = `🎉 Winner is ${winner.name}`;\n  }\n}\n\nlet computerCoords = [];\nfunction getComputerCoordinates() {\n  let coordinates = generateCoordinates();\n  while (checkCoordinates(coordinates)) {\n    coordinates = generateCoordinates();\n  }\n  computerCoords.push(coordinates);\n  return coordinates;\n}\n\nfunction checkCoordinates(coords) {\n  let included = false;\n  for (let coordinates of computerCoords) {\n    if (coordinates.x == coords.x && coordinates.y == coords.y) {\n      included = true;\n    }\n  }\n  return included;\n}\n\nfunction generateCoordinates() {\n  let x = Math.floor(Math.random() * 10);\n  let y = Math.floor(Math.random() * 10);\n  return { x, y };\n}\n\nfunction formatArray(array) {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    result.push(...array[i]);\n  }\n  return result;\n}\n\nfunction getCoordinatesInput() {\n  let coordinates = [];\n  let ship5 = ship5Input.value.split(\"-\");\n  coordinates.push({ length: 5, coords: { x: +ship5[1], y: +ship5[0] } });\n  let ship4 = ship4Input.value.split(\"-\");\n  coordinates.push({ length: 4, coords: { x: +ship4[1], y: +ship4[0] } });\n  let ship3 = ship3Input.value.split(\"-\");\n  coordinates.push({ length: 3, coords: { x: +ship3[1], y: +ship3[0] } });\n  let ship3_2 = ship3Input2.value.split(\"-\");\n  coordinates.push({ length: 3, coords: { x: +ship3_2[1], y: +ship3_2[0] } });\n  let ship2 = ship2Input.value.split(\"-\");\n  coordinates.push({ length: 2, coords: { x: +ship2[1], y: +ship2[0] } });\n  return coordinates;\n}\n\nfunction updateBoardDom(board, boardDOM, displayships = false) {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      let content = board[i][j];\n      if (content == \"ship\" && true) {\n        boardDOM[i][j].classList.add(\"ship\");\n        boardDOM[i][j].setAttribute(\"draggable\", true);\n      }\n      if (content == \"hit\") {\n        boardDOM[i][j].classList.add(\"hit\");\n      }\n      if (content == \"miss\") {\n        boardDOM[i][j].classList.add(\"miss\");\n      }\n    }\n  }\n}\n"],"names":["Ship","Cell","constructor","this","ship","isHit","module","exports","size","generateBoard","placeShip","coordinates","shipLength","isVertical","x","y","Promise","resolve","reject","newShip","i","push","length","splice","canPlaceShip","coords","getBoard","isNaN","receiveAttack","success","shipHit","error","hit","allShipsAreSunk","allAreSunk","isSunk","allShipsPlaced","getCell","Array","fill","map","_","GameBoard","Player","player","otherPlayer","gameStarted","newGame","boardSize","players","playerCoords","async","name","isComputer","catch","console","log","generateComputerBoard","shipLengths","currentShip","generateCoordinates","Math","floor","random","startGame","playTurn","result","getPlayerBoard","getOtherBoard","checkForWinner","targetBoard","board","j","content","cell","hits","abs","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","GameManager","boardsContainer","document","querySelector","formButton","playerNameInput","otherNameInput","info","ship5Input","ship4Input","ship3Input","ship3Input2","ship2Input","gameManager","playerBoardDOM","otherPlayerBoardDOM","createBoardDOM","id","boardDOM","createElement","classList","add","cells","row","setAttribute","reverse","array","formatArray","append","appendChild","addEventListener","event","preventDefault","playerName","value","otherName","innerHTML","ship5","split","ship4","ship3","ship3_2","ship2","getCoordinatesInput","window","alert","updateBoardDom","reportValidity","target","parentNode","checkCoordinates","computerCoords","getComputerCoordinates","winner","innerText","getAttribute","included","displayships"],"sourceRoot":""}